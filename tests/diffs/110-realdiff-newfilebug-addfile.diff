commit f2c85358125244becc81da0b74885478d0abda3c
Author: amollberg <amollberg@users.noreply.github.com>
Date:   Sun Oct 28 01:37:49 2018 +0200

    WIP Connection matrix

diff --git a/fragmap/test/connection.py b/fragmap/test/connection.py
new file mode 100644
index 0000000..8655fbf
--- /dev/null
+++ b/fragmap/test/connection.py
@@ -0,0 +1,74 @@
+#!/usr/bin/env python
+
+from common import *
+
+from parse_patch import *
+from generate_matrix import *
+
+# Test helpers
+
+def create_base_cell(character):
+  if character == ' ':
+    return Cell(Cell.NO_CHANGE)
+  if character == '^':
+    return Cell(Cell.BETWEEN_CHANGES)
+  return Cell(Cell.CHANGE, str(character))
+
+
+def create_node_matrix_from_description(desc_matrix):
+  return [[create_base_cell(cell) for cell in row] for row in desc_matrix]
+assert [[Cell(Cell.CHANGE, '3'), Cell(Cell.NO_CHANGE)]] == \
+       create_node_matrix_from_description(['3 '])
+
+
+def create_connection_matrix_from_description(desc_matrix):
+  def create_connected_cell(up_row, mid_row, down_row):
+    up_left, up, up_right = up_row
+    left, center, right = mid_row
+    down_left, down, down_right = down_row
+    def connection_status(character):
+      if character == ' ':
+        return ConnectionStatus.EMPTY
+      if character == '^':
+        return ConnectionStatus.INFILL
+      return ConnectionStatus.CONNECTION
+    return ConnectedCell(create_base_cell(center),
+                         Status9Neighborhood(up_left = connection_status(up_left),
+                                             up = connection_status(up),
+                                             up_right = connection_status(up_right),
+                                             left = connection_status(left),
+                                             center = connection_status(center),
+                                             right = connection_status(right),
+                                             down_left = connection_status(down_left),
+                                             down = connection_status(down),
+                                             down_right = connection_status(down_right)))
+  n_rows = len(desc_matrix)/3
+  n_cols = len(desc_matrix[0])
+  return [[create_connected_cell(desc_matrix[3*r][c],
+                                 desc_matrix[3*r + 1][c],
+                                 desc_matrix[3*r + 2][c])
+           for c in xrange(n_cols)] for r in xrange(n_rows)]
+
+class FakeFragmap(object):
+
+  def __init__(self, matrix):
+    self.matrix = matrix
+
+  def generate_matrix(self):
+    return self.matrix
+
+
+class ConnectionTest(unittest.TestCase):
+
+  def test_unconnected(self):
+    self.check_matrix([['   '],
+                       [' 1 '],
+                       ['   ']], ['1'])
+
+  def check_matrix(self, connection_matrix, node_matrix):
+    matrix = create_node_matrix_from_description(node_matrix)
+    expected_connection_matrix = create_connection_matrix_from_description(connection_matrix)
+    print (expected_connection_matrix)
+    connected_fragmap = ConnectedFragmap(FakeFragmap(matrix))
+    self.assertEqual(connected_fragmap.generate_matrix(),
+                     expected_connection_matrix)
diff --git a/fragmap/web_ui.py b/fragmap/web_ui.py
index a866e06..77f64e2 100644
--- a/fragmap/web_ui.py
+++ b/fragmap/web_ui.py
@@ -89 +93,0 @@ def open_fragmap_page(fragmap):
-        render_cell_graphics(tag, ConnectedCell(Cell(Cell.CHANGE), Bool8Neighborhood(False, True, False, True, True, True, True, True)), nop)
