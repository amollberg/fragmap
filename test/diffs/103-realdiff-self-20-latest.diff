3d32fe02559404351ac7ea057acb0e27a18dac94
commit 3d32fe02559404351ac7ea057acb0e27a18dac94
Author: amollberg <amollberg@users.noreply.github.com>
Date:   Thu Jul 21 11:48:44 2016 +0200

    Fixed whitespace

diff --git a/test/main.py b/test/main.py
index c2d5554..23986aa 100644
--- a/test/main.py
+++ b/test/main.py
@@ -42 +42 @@ class Test(unittest.TestCase):
-    
+
@@ -53 +53 @@ class Test(unittest.TestCase):
-                      '004-remove-one-line-empty-file.diff'], 
+                      '004-remove-one-line-empty-file.diff'],
@@ -64 +64 @@ class Test(unittest.TestCase):
-    self.check_diffs(['011-add-x-to-A-and-N.diff', 
+    self.check_diffs(['011-add-x-to-A-and-N.diff',
@@ -66 +66 @@ class Test(unittest.TestCase):
-                     ['#..#.', 
+                     ['#..#.',
@@ -93,3 +93,3 @@ class Test(unittest.TestCase):
-                      '031-addmod-add-c.diff'], 
-                     [['#..'],
-                      ['.#.']])
+                      '031-addmod-add-c.diff'],
+                     ['#..',
+                      '.#.'])
@@ -100,4 +100,4 @@ class Test(unittest.TestCase):
-                      '032-addmod-change-bc-to-xy.diff'], 
-                     [['#...'],
-                      ['..#.'],
-                      ['###.']])
+                      '032-addmod-change-bc-to-xy.diff'],
+                     ['#...',
+                      '..#.',
+                      '###.'])
@@ -110,5 +110,5 @@ class Test(unittest.TestCase):
-                      '033-addmod-add-z-between-xy.diff'], 
-                     [['#....'],
-                      ['..#..'],
-                      ['###..'],
-                      ['####.']])
+                      '033-addmod-add-z-between-xy.diff'],
+                     ['#....',
+                      '..#..',
+                      '###..',
+                      '####.'])
@@ -132 +132 @@ class Test(unittest.TestCase):
-    
+
@@ -139 +139 @@ class Test(unittest.TestCase):
-            
+
774c186d8a8e66bd9fe33509b0302e121ee3caf1
commit 774c186d8a8e66bd9fe33509b0302e121ee3caf1
Author: amollberg <amollberg@users.noreply.github.com>
Date:   Thu Jul 21 14:48:33 2016 +0200

    Changed from one-past to inclusive end. Successivemod fails on format

diff --git a/generate_matrix.py b/generate_matrix.py
index 06f07f0..dd90138 100644
--- a/generate_matrix.py
+++ b/generate_matrix.py
@@ -59 +59 @@ def update_line(line, bound_kind, file_patch):
-  # TODO: Dont move end markers from non-creation lines when updating with start of other
+  # TODO: Fix sorting of node line groups after this.
@@ -61 +61 @@ def update_line(line, bound_kind, file_patch):
-    is_creation = (marker._oldrange._start == marker._oldrange._end)
+    is_creation = (marker._oldrange._start == marker._oldrange._end + 1)
@@ -63 +63 @@ def update_line(line, bound_kind, file_patch):
-      is_creation and line == marker._oldrange._end):
+      is_creation and line == marker._oldrange._start):
@@ -77,0 +78,3 @@ def update_line(line, bound_kind, file_patch):
+  else:
+    # line is before any fragment; no update required
+    pass
diff --git a/parse_patch.py b/parse_patch.py
index 644b38a..5bd6d12 100644
--- a/parse_patch.py
+++ b/parse_patch.py
@@ -47 +47 @@ class Range():
-    self._end = start + length
+    self._end = start + length - 1
diff --git a/test/main.py b/test/main.py
index 23986aa..11d092f 100644
--- a/test/main.py
+++ b/test/main.py
@@ -116,0 +117,7 @@ class Test(unittest.TestCase):
+  def test_041_042_043(self):
+    self.check_diffs(['041-successivemod-mod-ab.diff',
+                      '042-successivemod-mod-cd.diff',
+                      '043-successivemod-mod-ef.diff'],
+                     ['#..',
+                      '.#.',
+                      '..#'])
44c6e1409ff9701696639d6317a154ae8a967329
commit 44c6e1409ff9701696639d6317a154ae8a967329
Author: amollberg <amollberg@users.noreply.github.com>
Date:   Thu Jul 21 16:32:35 2016 +0200

    Split update_line into new and inherited

diff --git a/generate_matrix.py b/generate_matrix.py
index dd90138..e5505d6 100644
--- a/generate_matrix.py
+++ b/generate_matrix.py
@@ -42 +42,18 @@ def nonnull_file(file_patch_header):
-def update_line(line, bound_kind, file_patch):
+
+def update_new_bound(fragment_i, bound_kind, file_patch):
+  """
+  Update a bound that belongs to the current diff. Simply apply whatever
+  fragment it belongs to.
+  """
+  line = 0
+  marker = file_patch._fragments[fragment_i]._header
+  if bound_kind == FragmentBoundNode.START:
+    line = marker._newrange._start
+    print "Setting new start line to", line
+  elif bound_kind == FragmentBoundNode.END:
+    line = marker._newrange._end
+    print "Setting new end line to", line
+  return line
+
+
+def update_inherited_bound(line, bound_kind, file_patch):
@@ -44 +61,3 @@ def update_line(line, bound_kind, file_patch):
-  Update one line in a file with a file patch.
+  Update a bound inherited from an older patch. Must never be
+  called for bounds belonging to the newest patch. Use
+  update_new_bound for them.
@@ -61,4 +80 @@ def update_line(line, bound_kind, file_patch):
-    is_creation = (marker._oldrange._start == marker._oldrange._end + 1)
-    if line < marker._oldrange._end or (
-      is_creation and line == marker._oldrange._start):
-
+    if line <= marker._oldrange._end:
@@ -82,0 +99,9 @@ def update_line(line, bound_kind, file_patch):
+def update_line(line, bound_kind, fragment_i, startdiff_i, diff_i, file_patch):
+  # If the current diff is the start diff of the
+  # affected node line:
+  if diff_i == startdiff_i:
+    # The bound is new
+    return update_new_bound(fragment_i, bound_kind, file_patch)
+  else:
+    # The bound is inherited
+    return update_inherited_bound(line, bound_kind, file_patch)
@@ -94,0 +120,3 @@ def update_file_positions(file_node_lines, file_patch, diff_i):
+                                 node_line.last()._fragment_i,
+                                 node_line._startdiff_i,
+                                 diff_i,
@@ -102 +130,2 @@ def extract_nodes(diff, diff_i):
-    for fragment in file_patch._fragments:
+    for fragment_i in range(len(file_patch._fragments)):
+      fragment = file_patch._fragments[fragment_i]
@@ -104 +133 @@ def extract_nodes(diff, diff_i):
-        FragmentBoundNode(diff, diff_i, file_patch, fragment, fragment._header._oldrange,
+        FragmentBoundNode(diff, diff_i, file_patch, fragment_i, fragment._header._oldrange,
@@ -106 +135 @@ def extract_nodes(diff, diff_i):
-        FragmentBoundNode(diff, diff_i, file_patch, fragment, fragment._header._oldrange,
+        FragmentBoundNode(diff, diff_i, file_patch, fragment_i, fragment._header._oldrange,
@@ -190,2 +219 @@ class FragmentBoundNode():
-
-  def __init__(self, diff, diff_i, file_patch, fragment, fragment_range, kind):
+  def __init__(self, diff, diff_i, file_patch, fragment_i, fragment_range, kind):
@@ -195 +223,2 @@ class FragmentBoundNode():
-    self._fragment = fragment
+    self._fragment = file_patch._fragments[fragment_i]
+    self._fragment_i = fragment_i
@@ -271,0 +301 @@ class FragmentBoundLine():
+
diff --git a/test/main.py b/test/main.py
index 11d092f..6a2bbe4 100644
--- a/test/main.py
+++ b/test/main.py
@@ -21 +21 @@ class Test(unittest.TestCase):
-  def test_update_line_create_at_beginning(self):
+  def test_update_inherited_bound_create_at_beginning(self):
@@ -25,2 +25,3 @@ class Test(unittest.TestCase):
-    self.assertEqual(update_line(1, FragmentBoundNode.START, filepatch), 1)
-    self.assertEqual(update_line(1, FragmentBoundNode.END, filepatch), 2)
+    # Subsequent lines shifted
+    self.assertEqual(update_inherited_bound(1, FragmentBoundNode.START, filepatch), 2)
+    self.assertEqual(update_inherited_bound(1, FragmentBoundNode.END, filepatch), 2)
@@ -29 +30 @@ class Test(unittest.TestCase):
-  def test_update_line_create_at_middle(self):
+  def test_update_inherited_bound_create_at_middle(self):
@@ -34,5 +35,16 @@ class Test(unittest.TestCase):
-    self.assertEqual(update_line(3, FragmentBoundNode.START, filepatch), 3)
-    self.assertEqual(update_line(3, FragmentBoundNode.END, filepatch), 3)
-    # Creation bounds moved
-    self.assertEqual(update_line(4, FragmentBoundNode.START, filepatch), 4)
-    self.assertEqual(update_line(4, FragmentBoundNode.END, filepatch), 5)
+    self.assertEqual(update_inherited_bound(3, FragmentBoundNode.START, filepatch), 3)
+    self.assertEqual(update_inherited_bound(3, FragmentBoundNode.END, filepatch), 3)
+    # Subsequent lines shifted
+    self.assertEqual(update_inherited_bound(10, FragmentBoundNode.START, filepatch), 11)
+    self.assertEqual(update_inherited_bound(13, FragmentBoundNode.END, filepatch), 14)
+
+  def test_update_inherited_bound_expand_at_middle(self):
+    filepatch = FilePatch(FilePatchHeader("dummy", "dummy"), [
+        Fragment(FragmentHeader(Range(4,2), Range(4,4)))])
+
+    # Previous lines unaffected
+    self.assertEqual(update_inherited_bound(3, FragmentBoundNode.START, filepatch), 3)
+    self.assertEqual(update_inherited_bound(3, FragmentBoundNode.END, filepatch), 3)
+    # Contained fragments expanded
+    self.assertEqual(update_inherited_bound(5, FragmentBoundNode.START, filepatch), 4)
+    self.assertEqual(update_inherited_bound(5, FragmentBoundNode.END, filepatch), 7)
@@ -40,2 +52,6 @@ class Test(unittest.TestCase):
-    self.assertEqual(update_line(10, FragmentBoundNode.START, filepatch), 11)
-    self.assertEqual(update_line(13, FragmentBoundNode.END, filepatch), 14)
+    self.assertEqual(update_inherited_bound(10, FragmentBoundNode.START, filepatch), 12)
+    self.assertEqual(update_inherited_bound(13, FragmentBoundNode.END, filepatch), 15)
+
+  def test_update_new_bound(self):
+    filepatch = FilePatch(FilePatchHeader("dummy", "dummy"), [
+        Fragment(FragmentHeader(Range(4,2), Range(4,4)))])
@@ -42,0 +59,3 @@ class Test(unittest.TestCase):
+    # Related bounds updated
+    self.assertEqual(update_new_bound(0, FragmentBoundNode.START, filepatch), 4)
+    self.assertEqual(update_new_bound(0, FragmentBoundNode.END, filepatch), 7)
57de9ffaa539c8f7e1ab8a27f0f27a06def2d75e
commit 57de9ffaa539c8f7e1ab8a27f0f27a06def2d75e
Author: amollberg <amollberg@users.noreply.github.com>
Date:   Fri Jul 22 10:26:08 2016 +0200

    Fix: correct end line in __lt__

diff --git a/generate_matrix.py b/generate_matrix.py
index e5505d6..a81da9b 100644
--- a/generate_matrix.py
+++ b/generate_matrix.py
@@ -253,0 +254,5 @@ class FragmentBoundLine():
+
+    if a._kind == FragmentBoundNode.END:
+      a_line += 1
+    if b._kind == FragmentBoundNode.END:
+      b_line += 1
@@ -259,0 +265,3 @@ class FragmentBoundLine():
+    # Remove base diffs
+    #common_diffs -= {a._startdiff_i -1,
+    #                 b._startdiff_i -1}
@@ -267,2 +275,2 @@ class FragmentBoundLine():
-    #print "Comparing (common diff %d) %s and %s" %(first_common_diff_i, a, b)
-    #print "Keys: (%s, %d) == (%s, %d)" %(a_file, a_line, b_file, b_line)
+    print "Comparing (common diff %d) %s and %s" %(first_common_diff_i, a, b)
+    print "Keys:", (a_file, a_line, a._kind), "==", (b_file, b_line, b._kind)
993810d6e98d7782416e1c95bd2533b753a0d01d
commit 993810d6e98d7782416e1c95bd2533b753a0d01d
Author: amollberg <amollberg@users.noreply.github.com>
Date:   Fri Jul 22 10:43:44 2016 +0200

    Group neighboring starts and ends. 2/19 tests fail

diff --git a/generate_matrix.py b/generate_matrix.py
index a81da9b..05992c4 100644
--- a/generate_matrix.py
+++ b/generate_matrix.py
@@ -265,3 +264,0 @@ class FragmentBoundLine():
-    # Remove base diffs
-    #common_diffs -= {a._startdiff_i -1,
-    #                 b._startdiff_i -1}
@@ -274,0 +272,5 @@ class FragmentBoundLine():
+    if a._kind == FragmentBoundNode.END:
+      a_line += 1
+    if b._kind == FragmentBoundNode.END:
+      b_line += 1
+
@@ -277 +279,5 @@ class FragmentBoundLine():
-    return a_file == b_file and a_line == b_line and a._kind == b._kind
+    # If a start and an end does not share a startdiff then it is safe to
+    # group them even though their kinds differ because it will still be
+    # possible to distinguish the bounds.
+    return a_file == b_file and a_line == b_line and (a._kind == b._kind or
+                                                      a._startdiff_i != b._startdiff_i)
diff --git a/test/main.py b/test/main.py
index 6a2bbe4..a22963f 100644
--- a/test/main.py
+++ b/test/main.py
@@ -113,2 +113,2 @@ class Test(unittest.TestCase):
-                     ['#..',
-                      '.#.'])
+                     ['#.',
+                      '.#'])
@@ -140,3 +140,3 @@ class Test(unittest.TestCase):
-                     ['#..',
-                      '.#.',
-                      '..#'])
+                     ['#...',
+                      '.#..',
+                      '..#.'])
82bb15f66c74aac4ca8137bddee7721df9263c57
commit 82bb15f66c74aac4ca8137bddee7721df9263c57
Author: amollberg <amollberg@users.noreply.github.com>
Date:   Fri Jul 22 15:45:18 2016 +0200

    Updated test_030_032 to more sensible reference. 2/19 fail

diff --git a/test/main.py b/test/main.py
index a22963f..e64164f 100644
--- a/test/main.py
+++ b/test/main.py
@@ -120 +120 @@ class Test(unittest.TestCase):
-                     ['#...',
+                     ['##..',
@@ -122 +122 @@ class Test(unittest.TestCase):
-                      '###.'])
+                      '.##.'])
501e09280578906c1bd2862e515ab7ff064467b1
commit 501e09280578906c1bd2862e515ab7ff064467b1
Author: amollberg <amollberg@users.noreply.github.com>
Date:   Fri Jul 22 16:22:26 2016 +0200

    Ignore startdiff-1 when grouping. 022_023 succeeds but 6/19 fail

diff --git a/generate_matrix.py b/generate_matrix.py
index 05992c4..01cc732 100644
--- a/generate_matrix.py
+++ b/generate_matrix.py
@@ -264,0 +265 @@ class FragmentBoundLine():
+    common_diffs -= {a._startdiff_i-1, b._startdiff_i-1}
diff --git a/test/main.py b/test/main.py
index e64164f..27d924d 100644
--- a/test/main.py
+++ b/test/main.py
@@ -103 +103 @@ class Test(unittest.TestCase):
-                     ['##.',
+                     ['.#.',
798369d511dac998c736f21764d03f4cf46ef00c
commit 798369d511dac998c736f21764d03f4cf46ef00c
Author: amollberg <amollberg@users.noreply.github.com>
Date:   Fri Jul 22 22:42:26 2016 +0200

    inside_fragment=False overrides True on inter-group conflict

diff --git a/generate_matrix.py b/generate_matrix.py
index 01cc732..51f966c 100644
--- a/generate_matrix.py
+++ b/generate_matrix.py
@@ -279 +279 @@ class FragmentBoundLine():
-    print "Keys:", (a_file, a_line, a._kind), "==", (b_file, b_line, b._kind)
+    print "Keys:", (a_file, a_line, a._kind, a._startdiff_i), "==", (b_file, b_line, b._kind, b._startdiff_i)
@@ -371 +371,6 @@ def generate_matrix(ast):
-            break
+            print "Setting inside_fragment =", inside_fragment
+            # If it was updated to False:
+            if not inside_fragment:
+              # False overrides True so that if start and end from same diff
+              # appear in same group we don't get stuck at True
+              break
7e677414c2148e1dd86256f49edd9498ac3dc020
commit 7e677414c2148e1dd86256f49edd9498ac3dc020
Author: amollberg <amollberg@users.noreply.github.com>
Date:   Fri Jul 22 22:43:39 2016 +0200

    Added helpers for counting starts/ends in groups. 7/20 fail

diff --git a/generate_matrix.py b/generate_matrix.py
index 51f966c..bae7631 100644
--- a/generate_matrix.py
+++ b/generate_matrix.py
@@ -259,2 +259,2 @@ class FragmentBoundLine():
-    #print "Comparing (common diff %d) %s and %s" %(last_common_diff_i, a, b)
-    #print "Keys: (%s, %d) < (%s, %d)" %(a_file, a_line, b_file, b_line)
+    print "Comparing (common diff %d) %s and %s" %(last_common_diff_i, a, b)
+    print "Keys: (%s, %d) < (%s, %d)" %(a_file, a_line, b_file, b_line)
diff --git a/test/main.py b/test/main.py
index 27d924d..297aff3 100644
--- a/test/main.py
+++ b/test/main.py
@@ -20,0 +21,3 @@ class Test(unittest.TestCase):
+  # Append instead of replace default assertion failure message
+  longMessage = True
+
@@ -71,2 +74,3 @@ class Test(unittest.TestCase):
-    self.check_diffs(['003-add-one-line-to-empty-file.diff',
-                      '004-remove-one-line-empty-file.diff'],
+    files = ['003-add-one-line-to-empty-file.diff',
+             '004-remove-one-line-empty-file.diff']
+    self.check_diffs(files,
@@ -75,0 +80,6 @@ class Test(unittest.TestCase):
+  def test_003_004_groups(self):
+    files = ['003-add-one-line-to-empty-file.diff',
+             '004-remove-one-line-empty-file.diff']
+    self.check_node_group_kinds(files, [(2,0), (0,2)])
+
+
@@ -143,0 +154,32 @@ class Test(unittest.TestCase):
+  def get_node_lines(self, diff_filenames):
+    diff = []
+    for fn in diff_filenames:
+      diff += read_diff(fn)
+    print diff
+    pp = PatchParser()
+    return update_all_positions_to_latest(pp.parse(diff)._patches)
+
+  def check_node_group_kinds(self, diff_filenames, kinds):
+    START = 0
+    END = 1
+    node_lines = self.get_node_lines(diff_filenames)
+    grouped_node_lines = group_fragment_bound_lines(node_lines)
+    self.assertEqual(len(grouped_node_lines), len(kinds))
+    i = 0
+    actual_kinds = [None]*len(grouped_node_lines)
+    for group in grouped_node_lines:
+      n_start = 0
+      n_end = 0
+      for node_line in group:
+        if node_line._kind == FragmentBoundNode.START:
+          n_start += 1
+        elif node_line._kind == FragmentBoundNode.END:
+          n_end += 1
+
+      actual_kinds[i] = (n_start, n_end)
+      #self.assertEqual(n_start, kinds[i][START], "Wrong number of starts in group %d: %s" % (i, grouped_node_lines))
+      #self.assertEqual(n_end, kinds[i][END], "Wrong number of ends in group %d: %s" % (i, grouped_node_lines))
+      i += 1
+    self.assertListEqual(actual_kinds, kinds, "Wrong numbers (starts, ends) in a group: %s" %(grouped_node_lines,))
+
+
ed5eaf20f54fe604eaae43f8a96c99b130fb14ab
commit ed5eaf20f54fe604eaae43f8a96c99b130fb14ab
Author: amollberg <amollberg@users.noreply.github.com>
Date:   Fri Jul 22 23:02:21 2016 +0200

    Fix: Prevent nodes from same diff from being grouped. 3/20 fail

diff --git a/generate_matrix.py b/generate_matrix.py
index bae7631..6fd69ba 100644
--- a/generate_matrix.py
+++ b/generate_matrix.py
@@ -335 +335,7 @@ def group_fragment_bound_lines(node_lines):
-      if node_line == group[0]:
+      inter_diff_collision = False
+      for member in group:
+        if member._startdiff_i == node_line._startdiff_i \
+        and member._kind != node_line._kind:
+          inter_diff_collision = True
+          break
+      if node_line == group[0] and not inter_diff_collision:
diff --git a/test/main.py b/test/main.py
index 297aff3..ccc721e 100644
--- a/test/main.py
+++ b/test/main.py
@@ -123,2 +123,2 @@ class Test(unittest.TestCase):
-                     ['#.',
-                      '.#'])
+                     ['#..',
+                      '.#.'])
92db6205fe907808e442f9e86d228e7d227fee6b
commit 92db6205fe907808e442f9e86d228e7d227fee6b
Author: amollberg <amollberg@users.noreply.github.com>
Date:   Fri Jul 22 23:15:42 2016 +0200

    Added test_011_012_groups which fails. 4/21 fail

diff --git a/test/main.py b/test/main.py
index ccc721e..0709fd6 100644
--- a/test/main.py
+++ b/test/main.py
@@ -96,0 +97,5 @@ class Test(unittest.TestCase):
+  def test_011_012_groups(self):
+    self.check_node_group_kinds(['011-add-x-to-A-and-N.diff',
+                                 '012-add-x-to-A-C.diff'],
+                     [(2,0),(0,1),(1,1),(0,1)]) # ((a)bc)(n)
+
dd67bd067276dd4fa7c697d3976566fa6e2feb87
commit dd67bd067276dd4fa7c697d3976566fa6e2feb87
Author: amollberg <amollberg@users.noreply.github.com>
Date:   Fri Jul 22 23:50:28 2016 +0200

    Improved test case readability: Automatic kind histograms

diff --git a/test/main.py b/test/main.py
index 0709fd6..2e526fd 100644
--- a/test/main.py
+++ b/test/main.py
@@ -17,0 +18,2 @@ def read_diff(filename):
+START = 0
+END = 1
@@ -83 +85 @@ class Test(unittest.TestCase):
-    self.check_node_group_kinds(files, [(2,0), (0,2)])
+    self.check_node_group_kinds(files, [[START,START], [END,END]]) # ((h))
@@ -100 +102 @@ class Test(unittest.TestCase):
-                     [(2,0),(0,1),(1,1),(0,1)]) # ((a)bc)(n)
+                                [[START, START],[END],[END,START],[END]]) # ((a)bc)(n)
@@ -168,2 +170,10 @@ class Test(unittest.TestCase):
-    START = 0
-    END = 1
+    def histogram_kinds(kinds):
+      hist = []
+      for group in kinds:
+        group_hist = {START : 0, END : 0}
+        print group_hist
+        for node_line_kind in group:
+          group_hist[node_line_kind] += 1
+        hist += [(group_hist[START], group_hist[END])]
+      return hist
+    kinds_hist = histogram_kinds(kinds)
@@ -172 +182 @@ class Test(unittest.TestCase):
-    self.assertEqual(len(grouped_node_lines), len(kinds))
+    self.assertEqual(len(grouped_node_lines), len(kinds_hist))
@@ -174 +184 @@ class Test(unittest.TestCase):
-    actual_kinds = [None]*len(grouped_node_lines)
+    actual_kinds_hist = [None]*len(grouped_node_lines)
@@ -184 +194 @@ class Test(unittest.TestCase):
-      actual_kinds[i] = (n_start, n_end)
+      actual_kinds_hist[i] = (n_start, n_end)
@@ -188 +198 @@ class Test(unittest.TestCase):
-    self.assertListEqual(actual_kinds, kinds, "Wrong numbers (starts, ends) in a group: %s" %(grouped_node_lines,))
+    self.assertListEqual(actual_kinds_hist, kinds_hist, "Wrong numbers (starts, ends) in a group: %s" %(grouped_node_lines,))
510b9206aa3b6265bbb4e0a0bcedd68989a1d5ed
commit 510b9206aa3b6265bbb4e0a0bcedd68989a1d5ed
Author: amollberg <amollberg@users.noreply.github.com>
Date:   Sat Jul 23 15:52:43 2016 +0200

    Added fn to print node line equality relation

diff --git a/generate_matrix.py b/generate_matrix.py
index 6fd69ba..b9e96c4 100644
--- a/generate_matrix.py
+++ b/generate_matrix.py
@@ -319,0 +320,16 @@ def earliest_diff(node_lines):
+def print_node_line_relation_table(node_lines):
+  """
+  Print a grid of '=' indicating which node_line
+  is equal to which.
+  """
+  N = len(node_lines)
+  grid = [['.' for i in xrange(N)] for j in xrange(N)]
+  for r in range(N):
+    for c in range(N):
+      if node_lines[r] == node_lines[c]:
+        grid[r][c] = '='
+  for row in grid:
+    print ''.join(row)
+
+
+
@@ -357,0 +374 @@ def generate_matrix(ast):
+  print_node_line_relation_table(node_lines)
@@ -358,0 +376 @@ def generate_matrix(ast):
+
@@ -361,0 +380 @@ def generate_matrix(ast):
+
3ffa603d9561f5cc7dc14ccc23b071420008654d
commit 3ffa603d9561f5cc7dc14ccc23b071420008654d
Author: amollberg <amollberg@users.noreply.github.com>
Date:   Sun Jul 24 09:57:58 2016 +0200

    Factorized out eq_at_diff, added debugging prints

diff --git a/generate_matrix.py b/generate_matrix.py
index b9e96c4..a6323e7 100644
--- a/generate_matrix.py
+++ b/generate_matrix.py
@@ -263,0 +264,19 @@ class FragmentBoundLine():
+    def eq_at_diff(a, b, diff_i):
+      a_file = a._nodehistory[diff_i]._filename
+      b_file = b._nodehistory[diff_i]._filename
+      a_line = a._nodehistory[diff_i]._line
+      b_line = b._nodehistory[diff_i]._line
+      if a._kind == FragmentBoundNode.END:
+        a_line += 1
+      if b._kind == FragmentBoundNode.END:
+        b_line += 1
+      if a_file != b_file:
+        print "file %s != %s at diff %d" %(a_file, b_file, diff_i)
+        return False
+      if a_line != b_line:
+        print "line %d != %d at diff %d" %(a_line, b_line, diff_i)
+        return False
+      #return a_file == b_file and a_line == b_line
+      return True
+
+    print "===== Comparing %s and %s" %(a,b)
@@ -267,10 +286 @@ class FragmentBoundLine():
-    # Order by filename at latest diff and then by
-    # line at earliest common diff
-    a_file = a._nodehistory[first_common_diff_i]._filename
-    b_file = b._nodehistory[first_common_diff_i]._filename
-    a_line = a._nodehistory[first_common_diff_i]._line
-    b_line = b._nodehistory[first_common_diff_i]._line
-    if a._kind == FragmentBoundNode.END:
-      a_line += 1
-    if b._kind == FragmentBoundNode.END:
-      b_line += 1
+    prev_diff_i = first_common_diff_i - 1
@@ -278,2 +288,2 @@ class FragmentBoundLine():
-    print "Comparing (common diff %d) %s and %s" %(first_common_diff_i, a, b)
-    print "Keys:", (a_file, a_line, a._kind, a._startdiff_i), "==", (b_file, b_line, b._kind, b._startdiff_i)
+    #print "Comparing (common diff %d) %s and %s" %(first_common_diff_i, a, b)
+    #print "Keys:", (a_file, a_line, a._kind, a._startdiff_i), "==", (b_file, b_line, b._kind, b._startdiff_i)
@@ -283,2 +293,11 @@ class FragmentBoundLine():
-    return a_file == b_file and a_line == b_line and (a._kind == b._kind or
-                                                      a._startdiff_i != b._startdiff_i)
+    if a._kind != b._kind and a._startdiff_i == b._startdiff_i:
+      print "kind %d != %d and same startdiff %d" %(a._kind, b._kind, a._startdiff_i)
+    if eq_at_diff(a, b, first_common_diff_i) \
+        and eq_at_diff(a, b, prev_diff_i) \
+        and (a._kind == b._kind or
+             a._startdiff_i != b._startdiff_i):
+      print "Lines are =="
+      return True
+    else:
+      print "Lines are !="
+      return False
diff --git a/test/main.py b/test/main.py
index 2e526fd..a96a954 100644
--- a/test/main.py
+++ b/test/main.py
@@ -178,0 +179,2 @@ class Test(unittest.TestCase):
+    def stringify_kinds_list(l):
+      return map(lambda e: {START:'start', END:'end'}[e], l)
@@ -179,0 +182 @@ class Test(unittest.TestCase):
+    kinds = map(stringify_kinds_list, kinds)
@@ -180,0 +184 @@ class Test(unittest.TestCase):
+    print_node_line_relation_table(node_lines)
@@ -182 +186,3 @@ class Test(unittest.TestCase):
-    self.assertEqual(len(grouped_node_lines), len(kinds_hist))
+    error_string = "Required starts and ends in groups: \n %s\nActual: %s" %(
+      kinds, grouped_node_lines)
+    self.assertEqual(len(grouped_node_lines), len(kinds_hist), "Wrong length; " + error_string)
@@ -198 +204 @@ class Test(unittest.TestCase):
-    self.assertListEqual(actual_kinds_hist, kinds_hist, "Wrong numbers (starts, ends) in a group: %s" %(grouped_node_lines,))
+    self.assertListEqual(actual_kinds_hist, kinds_hist, error_string)
01e24deb8f1cfe9eed5f38d84b913c4501a5ed29
commit 01e24deb8f1cfe9eed5f38d84b913c4501a5ed29
Author: amollberg <amollberg@users.noreply.github.com>
Date:   Sun Jul 24 10:01:44 2016 +0200

    Added group tests 030_032 and 030_033

diff --git a/test/main.py b/test/main.py
index a96a954..2f8f339 100644
--- a/test/main.py
+++ b/test/main.py
@@ -102 +102 @@ class Test(unittest.TestCase):
-                                [[START, START],[END],[END,START],[END]]) # ((a)bc)(n)
+                                [[START, START],[END],[END],[START],[END]]) # ((a)bc)..(n)
@@ -139,0 +140,5 @@ class Test(unittest.TestCase):
+  def test_030_032_groups(self):
+    self.check_node_group_kinds(['030-addmod-create-with-ab.diff',
+                                 '031-addmod-add-c.diff',
+                                 '032-addmod-change-bc-to-xy.diff'],
+                                [[START],[START],[END,START],[END,END]]) # (a((xy)))
@@ -152,0 +158,9 @@ class Test(unittest.TestCase):
+  def test_030_033_groups(self):
+    self.check_node_group_kinds(['030-addmod-create-with-ab.diff',
+                                 '031-addmod-add-c.diff',
+                                 '032-addmod-change-bc-to-xy.diff',
+                                 '033-addmod-add-z-between-xy.diff'],
+                                # (a((x(z)y)))
+                                [[START],[START,START],[START],[END],[END,END,END]])
+
+
5aa021f2eac4111b53929bd5705ae7ecd9fc6cd7
commit 5aa021f2eac4111b53929bd5705ae7ecd9fc6cd7
Author: amollberg <amollberg@users.noreply.github.com>
Date:   Sun Jul 24 11:00:09 2016 +0200

    Added console_ui with mockup

diff --git a/console_ui.py b/console_ui.py
new file mode 100644
index 0000000..0d159ab
--- /dev/null
+++ b/console_ui.py
@@ -0,0 +1,34 @@
+from parse_patch import *
+from generate_matrix import *
+
+CONSOLE_WIDTH = 80
+
+# TODO: Change name?
+def print_hunkogram(diff_list):
+  matrix = generate_matrix(diff_list)
+  matrix_width = len(matrix[0])
+  hash_width = 8
+  padded_matrix_width = max(CONSOLE_WIDTH/2, matrix_width)
+  max_commit_width = min(CONSOLE_WIDTH/2, CONSOLE_WIDTH - (hash_width + 1 + 1 + padded_matrix_width))
+  for row in matrix:
+    commit_msg = "Test"
+    hash = "abcd0123"
+    # Pad short commit messages
+    commit_msg = commit_msg.ljust(max_commit_width, ' ')
+    # Truncate long commit messages
+    commit_msg = commit_msg[0:min(max_commit_width,len(commit_msg))]
+    # Print hash, commit, matrix row
+    hash = hash[0:hash_width]
+    print hash, commit_msg, ''.join(row)
+
+def main():
+  pp = PatchParser()
+  lines = [line.rstrip() for line in sys.stdin]
+  print lines
+  diff_list = pp.parse(lines)
+  print_hunkogram(diff_list)
+
+
+
+if __name__ == '__main__':
+  main()
bd48487445b6ef3f24dac66ce00926b23d2fe24c
commit bd48487445b6ef3f24dac66ce00926b23d2fe24c
Author: amollberg <amollberg@users.noreply.github.com>
Date:   Sun Jul 24 11:07:12 2016 +0200

    Fixed uninited patch _header, added actual hash to console_ui

diff --git a/console_ui.py b/console_ui.py
index 0d159ab..e0e2137 100644
--- a/console_ui.py
+++ b/console_ui.py
@@ -13 +13 @@ def print_hunkogram(diff_list):
-  for row in matrix:
+  for r in range(len(matrix)):
@@ -15 +15 @@ def print_hunkogram(diff_list):
-    hash = "abcd0123"
+    hash = diff_list._patches[r]._header._hash
@@ -22 +22 @@ def print_hunkogram(diff_list):
-    print hash, commit_msg, ''.join(row)
+    print hash, commit_msg, ''.join(matrix[r])
diff --git a/parse_patch.py b/parse_patch.py
index 5bd6d12..aaa5496 100644
--- a/parse_patch.py
+++ b/parse_patch.py
@@ -230 +230 @@ class Patch():
-  def __init__(self, filepatches):
+  def __init__(self, filepatches, header):
@@ -231,0 +232 @@ class Patch():
+    self._header = header
@@ -234 +235 @@ class Patch():
-    return "\n <Patch: %s>" % (self._filepatches,)
+    return "\n <Patch: %s %s>" % (self._header, self._filepatches)
@@ -261 +262 @@ class Patch():
-    return Patch(filepatches), lines
+    return Patch(filepatches, header), lines
58a8c50cd6abc0b2ac50f71f459ddf6582d36368
commit 58a8c50cd6abc0b2ac50f71f459ddf6582d36368
Author: amollberg <amollberg@users.noreply.github.com>
Date:   Sun Jul 24 11:26:21 2016 +0200

    Added commit message parsing, added actual message to console_ui

diff --git a/console_ui.py b/console_ui.py
index e0e2137..43a675a 100644
--- a/console_ui.py
+++ b/console_ui.py
@@ -14,2 +14,3 @@ def print_hunkogram(diff_list):
-    commit_msg = "Test"
-    hash = diff_list._patches[r]._header._hash
+    cur_patch = diff_list._patches[r]._header
+    commit_msg = cur_patch._message[0] # First row of message
+    hash = cur_patch._hash
diff --git a/parse_patch.py b/parse_patch.py
index aaa5496..1c9ad7c 100644
--- a/parse_patch.py
+++ b/parse_patch.py
@@ -192,0 +193 @@ class PatchHeader():
+  _message = None
@@ -194 +195 @@ class PatchHeader():
-  def __init__(self, hash):
+  def __init__(self, hash, message):
@@ -195,0 +197 @@ class PatchHeader():
+    self._message = message
@@ -198 +200 @@ class PatchHeader():
-    return "<PatchHeader: %s>" %(self._hash,)
+    return "<PatchHeader: %s\n%s>" %(self._hash, self._message)
@@ -219,0 +222 @@ class PatchHeader():
+    message = []
@@ -222,0 +226,3 @@ class PatchHeader():
+      if lines[0] != '':
+        # Add line to message list
+        message += [lines[0].strip()]
@@ -224 +230 @@ class PatchHeader():
-    return PatchHeader(hash), lines
+    return PatchHeader(hash, message), lines
68f1ef779d8c11e97f7c29cba92c839ca6f53244
commit 68f1ef779d8c11e97f7c29cba92c839ca6f53244
Author: amollberg <amollberg@users.noreply.github.com>
Date:   Sun Jul 24 15:16:39 2016 +0200

    Added debugging to node line __lt__. 4/23 fail

diff --git a/generate_matrix.py b/generate_matrix.py
index a6323e7..299e251 100644
--- a/generate_matrix.py
+++ b/generate_matrix.py
@@ -25,0 +26,4 @@ from parse_patch import *
+DEBUG_SORTING = True
+DEBUG_GROUPING = False
+
+
@@ -244,0 +249,19 @@ class FragmentBoundLine():
+    def lt_at_diff(a, b, diff_i):
+      a_file = a._nodehistory[diff_i]._filename
+      b_file = b._nodehistory[diff_i]._filename
+      a_line = a._nodehistory[diff_i]._line
+      b_line = b._nodehistory[diff_i]._line
+      if a._kind == FragmentBoundNode.END:
+        a_line += 1
+      if b._kind == FragmentBoundNode.END:
+        b_line += 1
+      if a_file < b_file:
+        if DEBUG_SORTING:
+          print "file %s < %s at diff %d" %(a_file, b_file, diff_i)
+        return True
+      if a_file == b_file and a_line < b_line:
+        if DEBUG_SORTING:
+          print "line %d < %d at diff %d" %(a_line, b_line, diff_i)
+        return True
+      return False
+
@@ -250,12 +273,13 @@ class FragmentBoundLine():
-    a_file = a._nodehistory[last_common_diff_i]._filename
-    b_file = b._nodehistory[last_common_diff_i]._filename
-    a_line = a._nodehistory[last_common_diff_i]._line
-    b_line = b._nodehistory[last_common_diff_i]._line
-
-    if a._kind == FragmentBoundNode.END:
-      a_line += 1
-    if b._kind == FragmentBoundNode.END:
-      b_line += 1
-    print "Comparing (common diff %d) %s and %s" %(last_common_diff_i, a, b)
-    print "Keys: (%s, %d) < (%s, %d)" %(a_file, a_line, b_file, b_line)
-    return a_file < b_file or (a_file == b_file and a_line < b_line)
+    if DEBUG_SORTING:
+      print "<<<<< Comparing at last_common=%d %s and %s" %(last_common_diff_i, a,b)
+
+
+    if lt_at_diff(a, b, last_common_diff_i):
+      if DEBUG_SORTING:
+        print "Lines are <"
+      return True
+    else:
+      if DEBUG_SORTING:
+        print "Lines are !<"
+      return False
+
@@ -274 +298,2 @@ class FragmentBoundLine():
-        print "file %s != %s at diff %d" %(a_file, b_file, diff_i)
+        if DEBUG_GROUPING:
+          print "file %s != %s at diff %d" %(a_file, b_file, diff_i)
@@ -277 +302,2 @@ class FragmentBoundLine():
-        print "line %d != %d at diff %d" %(a_line, b_line, diff_i)
+        if DEBUG_GROUPING:
+          print "line %d != %d at diff %d" %(a_line, b_line, diff_i)
@@ -282 +308,2 @@ class FragmentBoundLine():
-    print "===== Comparing %s and %s" %(a,b)
+    if DEBUG_GROUPING:
+      print "===== Comparing %s and %s" %(a,b)
@@ -294 +321,2 @@ class FragmentBoundLine():
-      print "kind %d != %d and same startdiff %d" %(a._kind, b._kind, a._startdiff_i)
+      if DEBUG_GROUPING:
+        print "kind %d != %d and same startdiff %d" %(a._kind, b._kind, a._startdiff_i)
@@ -299 +327,2 @@ class FragmentBoundLine():
-      print "Lines are =="
+      if DEBUG_GROUPING:
+        print "Lines are =="
@@ -302 +331,2 @@ class FragmentBoundLine():
-      print "Lines are !="
+      if DEBUG_GROUPING:
+        print "Lines are !="
@@ -365,0 +396,2 @@ def group_fragment_bound_lines(node_lines):
+  if DEBUG_SORTING:
+    print "Sorted lines:", node_lines
@@ -393 +425,2 @@ def generate_matrix(ast):
-  print_node_line_relation_table(node_lines)
+  if DEBUG_GROUPING:
+    print_node_line_relation_table(node_lines)
95c76393de855d383bdba1ac924dac7fd043909a
commit 95c76393de855d383bdba1ac924dac7fd043909a
Author: amollberg <amollberg@users.noreply.github.com>
Date:   Sun Jul 24 15:23:18 2016 +0200

    Changed __lt__ to compare at first common and prev diff. 0/23 fail

diff --git a/generate_matrix.py b/generate_matrix.py
index 299e251..183401a 100644
--- a/generate_matrix.py
+++ b/generate_matrix.py
@@ -270 +270,3 @@ class FragmentBoundLine():
-    last_common_diff_i = max(common_diffs)
+    common_diffs -= {a._startdiff_i-1, b._startdiff_i-1}
+    first_common_diff_i = min(common_diffs)
+    prev_diff_i = first_common_diff_i - 1
@@ -274 +276 @@ class FragmentBoundLine():
-      print "<<<<< Comparing at last_common=%d %s and %s" %(last_common_diff_i, a,b)
+      print "<<<<< Comparing at first_common=%d %s and %s" %(first_common_diff_i, a,b)
@@ -276,2 +278,5 @@ class FragmentBoundLine():
-
-    if lt_at_diff(a, b, last_common_diff_i):
+    if lt_at_diff(a, b, prev_diff_i):
+      if DEBUG_SORTING:
+        print "Lines are < at prev diff", prev_diff_i
+      return True
+    if lt_at_diff(a, b, first_common_diff_i):
@@ -279 +284 @@ class FragmentBoundLine():
-        print "Lines are <"
+        print "Lines are < at first diff", first_common_diff_i
diff --git a/test/main.py b/test/main.py
index 2f8f339..ea874d7 100644
--- a/test/main.py
+++ b/test/main.py
@@ -152,4 +152,4 @@ class Test(unittest.TestCase):
-                     ['#....',
-                      '..#..',
-                      '###..',
-                      '####.'])
+                     ['##....',
+                      '..###.',
+                      '.####.',
+                      '...#..'])
@@ -163,2 +163,2 @@ class Test(unittest.TestCase):
-                                # (a((x(z)y)))
-                                [[START],[START,START],[START],[END],[END,END,END]])
+                                # 5a3.54x2z2y43
+                                [[START],[START],[END,START],[START],[END],[END,END]])
