bd48487445b6ef3f24dac66ce00926b23d2fe24c
commit bd48487445b6ef3f24dac66ce00926b23d2fe24c
Author: amollberg <amollberg@users.noreply.github.com>
Date:   Sun Jul 24 11:07:12 2016 +0200

    Fixed uninited patch _header, added actual hash to console_ui

diff --git a/console_ui.py b/console_ui.py
index 0d159ab..e0e2137 100644
--- a/console_ui.py
+++ b/console_ui.py
@@ -13 +13 @@ def print_hunkogram(diff_list):
-  for row in matrix:
+  for r in range(len(matrix)):
@@ -15 +15 @@ def print_hunkogram(diff_list):
-    hash = "abcd0123"
+    hash = diff_list._patches[r]._header._hash
@@ -22 +22 @@ def print_hunkogram(diff_list):
-    print hash, commit_msg, ''.join(row)
+    print hash, commit_msg, ''.join(matrix[r])
diff --git a/parse_patch.py b/parse_patch.py
index 5bd6d12..aaa5496 100644
--- a/parse_patch.py
+++ b/parse_patch.py
@@ -230 +230 @@ class Patch():
-  def __init__(self, filepatches):
+  def __init__(self, filepatches, header):
@@ -231,0 +232 @@ class Patch():
+    self._header = header
@@ -234 +235 @@ class Patch():
-    return "\n <Patch: %s>" % (self._filepatches,)
+    return "\n <Patch: %s %s>" % (self._header, self._filepatches)
@@ -261 +262 @@ class Patch():
-    return Patch(filepatches), lines
+    return Patch(filepatches, header), lines
58a8c50cd6abc0b2ac50f71f459ddf6582d36368
commit 58a8c50cd6abc0b2ac50f71f459ddf6582d36368
Author: amollberg <amollberg@users.noreply.github.com>
Date:   Sun Jul 24 11:26:21 2016 +0200

    Added commit message parsing, added actual message to console_ui

diff --git a/console_ui.py b/console_ui.py
index e0e2137..43a675a 100644
--- a/console_ui.py
+++ b/console_ui.py
@@ -14,2 +14,3 @@ def print_hunkogram(diff_list):
-    commit_msg = "Test"
-    hash = diff_list._patches[r]._header._hash
+    cur_patch = diff_list._patches[r]._header
+    commit_msg = cur_patch._message[0] # First row of message
+    hash = cur_patch._hash
diff --git a/parse_patch.py b/parse_patch.py
index aaa5496..1c9ad7c 100644
--- a/parse_patch.py
+++ b/parse_patch.py
@@ -192,0 +193 @@ class PatchHeader():
+  _message = None
@@ -194 +195 @@ class PatchHeader():
-  def __init__(self, hash):
+  def __init__(self, hash, message):
@@ -195,0 +197 @@ class PatchHeader():
+    self._message = message
@@ -198 +200 @@ class PatchHeader():
-    return "<PatchHeader: %s>" %(self._hash,)
+    return "<PatchHeader: %s\n%s>" %(self._hash, self._message)
@@ -219,0 +222 @@ class PatchHeader():
+    message = []
@@ -222,0 +226,3 @@ class PatchHeader():
+      if lines[0] != '':
+        # Add line to message list
+        message += [lines[0].strip()]
@@ -224 +230 @@ class PatchHeader():
-    return PatchHeader(hash), lines
+    return PatchHeader(hash, message), lines
68f1ef779d8c11e97f7c29cba92c839ca6f53244
commit 68f1ef779d8c11e97f7c29cba92c839ca6f53244
Author: amollberg <amollberg@users.noreply.github.com>
Date:   Sun Jul 24 15:16:39 2016 +0200

    Added debugging to node line __lt__. 4/23 fail

diff --git a/generate_matrix.py b/generate_matrix.py
index a6323e7..299e251 100644
--- a/generate_matrix.py
+++ b/generate_matrix.py
@@ -25,0 +26,4 @@ from parse_patch import *
+DEBUG_SORTING = True
+DEBUG_GROUPING = False
+
+
@@ -244,0 +249,19 @@ class FragmentBoundLine():
+    def lt_at_diff(a, b, diff_i):
+      a_file = a._nodehistory[diff_i]._filename
+      b_file = b._nodehistory[diff_i]._filename
+      a_line = a._nodehistory[diff_i]._line
+      b_line = b._nodehistory[diff_i]._line
+      if a._kind == FragmentBoundNode.END:
+        a_line += 1
+      if b._kind == FragmentBoundNode.END:
+        b_line += 1
+      if a_file < b_file:
+        if DEBUG_SORTING:
+          print "file %s < %s at diff %d" %(a_file, b_file, diff_i)
+        return True
+      if a_file == b_file and a_line < b_line:
+        if DEBUG_SORTING:
+          print "line %d < %d at diff %d" %(a_line, b_line, diff_i)
+        return True
+      return False
+
@@ -250,12 +273,13 @@ class FragmentBoundLine():
-    a_file = a._nodehistory[last_common_diff_i]._filename
-    b_file = b._nodehistory[last_common_diff_i]._filename
-    a_line = a._nodehistory[last_common_diff_i]._line
-    b_line = b._nodehistory[last_common_diff_i]._line
-
-    if a._kind == FragmentBoundNode.END:
-      a_line += 1
-    if b._kind == FragmentBoundNode.END:
-      b_line += 1
-    print "Comparing (common diff %d) %s and %s" %(last_common_diff_i, a, b)
-    print "Keys: (%s, %d) < (%s, %d)" %(a_file, a_line, b_file, b_line)
-    return a_file < b_file or (a_file == b_file and a_line < b_line)
+    if DEBUG_SORTING:
+      print "<<<<< Comparing at last_common=%d %s and %s" %(last_common_diff_i, a,b)
+
+
+    if lt_at_diff(a, b, last_common_diff_i):
+      if DEBUG_SORTING:
+        print "Lines are <"
+      return True
+    else:
+      if DEBUG_SORTING:
+        print "Lines are !<"
+      return False
+
@@ -274 +298,2 @@ class FragmentBoundLine():
-        print "file %s != %s at diff %d" %(a_file, b_file, diff_i)
+        if DEBUG_GROUPING:
+          print "file %s != %s at diff %d" %(a_file, b_file, diff_i)
@@ -277 +302,2 @@ class FragmentBoundLine():
-        print "line %d != %d at diff %d" %(a_line, b_line, diff_i)
+        if DEBUG_GROUPING:
+          print "line %d != %d at diff %d" %(a_line, b_line, diff_i)
@@ -282 +308,2 @@ class FragmentBoundLine():
-    print "===== Comparing %s and %s" %(a,b)
+    if DEBUG_GROUPING:
+      print "===== Comparing %s and %s" %(a,b)
@@ -294 +321,2 @@ class FragmentBoundLine():
-      print "kind %d != %d and same startdiff %d" %(a._kind, b._kind, a._startdiff_i)
+      if DEBUG_GROUPING:
+        print "kind %d != %d and same startdiff %d" %(a._kind, b._kind, a._startdiff_i)
@@ -299 +327,2 @@ class FragmentBoundLine():
-      print "Lines are =="
+      if DEBUG_GROUPING:
+        print "Lines are =="
@@ -302 +331,2 @@ class FragmentBoundLine():
-      print "Lines are !="
+      if DEBUG_GROUPING:
+        print "Lines are !="
@@ -365,0 +396,2 @@ def group_fragment_bound_lines(node_lines):
+  if DEBUG_SORTING:
+    print "Sorted lines:", node_lines
@@ -393 +425,2 @@ def generate_matrix(ast):
-  print_node_line_relation_table(node_lines)
+  if DEBUG_GROUPING:
+    print_node_line_relation_table(node_lines)
95c76393de855d383bdba1ac924dac7fd043909a
commit 95c76393de855d383bdba1ac924dac7fd043909a
Author: amollberg <amollberg@users.noreply.github.com>
Date:   Sun Jul 24 15:23:18 2016 +0200

    Changed __lt__ to compare at first common and prev diff. 0/23 fail

diff --git a/generate_matrix.py b/generate_matrix.py
index 299e251..183401a 100644
--- a/generate_matrix.py
+++ b/generate_matrix.py
@@ -270 +270,3 @@ class FragmentBoundLine():
-    last_common_diff_i = max(common_diffs)
+    common_diffs -= {a._startdiff_i-1, b._startdiff_i-1}
+    first_common_diff_i = min(common_diffs)
+    prev_diff_i = first_common_diff_i - 1
@@ -274 +276 @@ class FragmentBoundLine():
-      print "<<<<< Comparing at last_common=%d %s and %s" %(last_common_diff_i, a,b)
+      print "<<<<< Comparing at first_common=%d %s and %s" %(first_common_diff_i, a,b)
@@ -276,2 +278,5 @@ class FragmentBoundLine():
-
-    if lt_at_diff(a, b, last_common_diff_i):
+    if lt_at_diff(a, b, prev_diff_i):
+      if DEBUG_SORTING:
+        print "Lines are < at prev diff", prev_diff_i
+      return True
+    if lt_at_diff(a, b, first_common_diff_i):
@@ -279 +284 @@ class FragmentBoundLine():
-        print "Lines are <"
+        print "Lines are < at first diff", first_common_diff_i
diff --git a/test/main.py b/test/main.py
index 2f8f339..ea874d7 100644
--- a/test/main.py
+++ b/test/main.py
@@ -152,4 +152,4 @@ class Test(unittest.TestCase):
-                     ['#....',
-                      '..#..',
-                      '###..',
-                      '####.'])
+                     ['##....',
+                      '..###.',
+                      '.####.',
+                      '...#..'])
@@ -163,2 +163,2 @@ class Test(unittest.TestCase):
-                                # (a((x(z)y)))
-                                [[START],[START,START],[START],[END],[END,END,END]])
+                                # 5a3.54x2z2y43
+                                [[START],[START],[END,START],[START],[END],[END,END]])
